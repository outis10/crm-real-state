package com.outis.crm.domain;

import static com.outis.crm.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class QuotationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuotationAllPropertiesEquals(Quotation expected, Quotation actual) {
        assertQuotationAutoGeneratedPropertiesEquals(expected, actual);
        assertQuotationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuotationAllUpdatablePropertiesEquals(Quotation expected, Quotation actual) {
        assertQuotationUpdatableFieldsEquals(expected, actual);
        assertQuotationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuotationAutoGeneratedPropertiesEquals(Quotation expected, Quotation actual) {
        assertThat(actual)
            .as("Verify Quotation auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuotationUpdatableFieldsEquals(Quotation expected, Quotation actual) {
        assertThat(actual)
            .as("Verify Quotation relevant properties")
            .satisfies(a ->
                assertThat(a.getFinalPrice())
                    .as("check finalPrice")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getFinalPrice())
            )
            .satisfies(a -> assertThat(a.getValidityDate()).as("check validityDate").isEqualTo(expected.getValidityDate()))
            .satisfies(a -> assertThat(a.getComments()).as("check comments").isEqualTo(expected.getComments()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuotationUpdatableRelationshipsEquals(Quotation expected, Quotation actual) {
        assertThat(actual)
            .as("Verify Quotation relationships")
            .satisfies(a -> assertThat(a.getCustomer()).as("check customer").isEqualTo(expected.getCustomer()))
            .satisfies(a -> assertThat(a.getProperty()).as("check property").isEqualTo(expected.getProperty()));
    }
}
