package com.outis.crm.domain;

import static com.outis.crm.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class OpportunityAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOpportunityAllPropertiesEquals(Opportunity expected, Opportunity actual) {
        assertOpportunityAutoGeneratedPropertiesEquals(expected, actual);
        assertOpportunityAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOpportunityAllUpdatablePropertiesEquals(Opportunity expected, Opportunity actual) {
        assertOpportunityUpdatableFieldsEquals(expected, actual);
        assertOpportunityUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOpportunityAutoGeneratedPropertiesEquals(Opportunity expected, Opportunity actual) {
        assertThat(actual)
            .as("Verify Opportunity auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOpportunityUpdatableFieldsEquals(Opportunity expected, Opportunity actual) {
        assertThat(actual)
            .as("Verify Opportunity relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a ->
                assertThat(a.getBudget()).as("check budget").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getBudget())
            )
            .satisfies(a ->
                assertThat(a.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getAmount())
            )
            .satisfies(a -> assertThat(a.getProbability()).as("check probability").isEqualTo(expected.getProbability()))
            .satisfies(a -> assertThat(a.getExpectedCloseDate()).as("check expectedCloseDate").isEqualTo(expected.getExpectedCloseDate()))
            .satisfies(a -> assertThat(a.getStage()).as("check stage").isEqualTo(expected.getStage()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getModifiedAt()).as("check modifiedAt").isEqualTo(expected.getModifiedAt()))
            .satisfies(a -> assertThat(a.getClosedAt()).as("check closedAt").isEqualTo(expected.getClosedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOpportunityUpdatableRelationshipsEquals(Opportunity expected, Opportunity actual) {
        assertThat(actual)
            .as("Verify Opportunity relationships")
            .satisfies(a -> assertThat(a.getCustomer()).as("check customer").isEqualTo(expected.getCustomer()))
            .satisfies(a -> assertThat(a.getProperty()).as("check property").isEqualTo(expected.getProperty()));
    }
}
