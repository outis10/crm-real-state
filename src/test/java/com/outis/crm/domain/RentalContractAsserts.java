package com.outis.crm.domain;

import static com.outis.crm.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class RentalContractAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRentalContractAllPropertiesEquals(RentalContract expected, RentalContract actual) {
        assertRentalContractAutoGeneratedPropertiesEquals(expected, actual);
        assertRentalContractAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRentalContractAllUpdatablePropertiesEquals(RentalContract expected, RentalContract actual) {
        assertRentalContractUpdatableFieldsEquals(expected, actual);
        assertRentalContractUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRentalContractAutoGeneratedPropertiesEquals(RentalContract expected, RentalContract actual) {
        assertThat(actual)
            .as("Verify RentalContract auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRentalContractUpdatableFieldsEquals(RentalContract expected, RentalContract actual) {
        assertThat(actual)
            .as("Verify RentalContract relevant properties")
            .satisfies(a -> assertThat(a.getStartDate()).as("check startDate").isEqualTo(expected.getStartDate()))
            .satisfies(a -> assertThat(a.getEndDate()).as("check endDate").isEqualTo(expected.getEndDate()))
            .satisfies(a ->
                assertThat(a.getMonthlyRent())
                    .as("check monthlyRent")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getMonthlyRent())
            )
            .satisfies(a ->
                assertThat(a.getSecurityDeposit())
                    .as("check securityDeposit")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getSecurityDeposit())
            )
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRentalContractUpdatableRelationshipsEquals(RentalContract expected, RentalContract actual) {
        assertThat(actual)
            .as("Verify RentalContract relationships")
            .satisfies(a -> assertThat(a.getProperty()).as("check property").isEqualTo(expected.getProperty()))
            .satisfies(a -> assertThat(a.getCustomer()).as("check customer").isEqualTo(expected.getCustomer()));
    }
}
